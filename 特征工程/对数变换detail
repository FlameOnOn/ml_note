对数变换详细:
对数函数可以将 (0, 1) 这个小区间中
的数映射到 (-∞, 0) 这个包括全部负数的大区间上。函数 log10(x) 可以将区间 [1, 10] 映射到[0, 1]，将 [10, 100] 映射到 [1, 2]，以此类推。换言之，对数函数可以对大数值的范围进行
压缩，对小数值的范围进行扩展。x 越大，log(x) 增长得越慢。
对于具有重尾分布的正数值的处理，对数变换是一个非常强大的工具。（与高斯分布相比，重尾分布的概率质量更多地位于尾部)它压缩了分布高端的长尾，使之成为较短的尾部，
并将低端扩展为更长的头部。
经过对数变换之后，直
方图在低计数值的集中趋势被减弱了，在 x 轴上的分布更均匀了一些

指数变换是个变换族，对数变换只是它的一个特例。用统计学术语来说，它们都是方差稳
定化变换。要理解为什么方差稳定是个好性质，可以考虑一下泊松分布。泊松分布是一种
重尾分布，它的方差等于它的均值。因此，它的质心越大，方差就越大，重尾程度也越
大。指数变换可以改变变量的分布，使得方差不再依赖于均值。例如，假设一个随机变量
X 具有泊松分布，如果通过取它的平方根对它进行变换，那么 X X  = 的方差就近似是一
个常数，而不是与均值相等
平方根变换和对数变换都可以简单推广为 Box-Cox 变换
λ 小于 1 时，可以压缩高端值；λ 大于 1 时，起的作
用是相反的.只有当数据为正时，Box-Cox 公式才有效。对于非正数据，我们可以加上一个固定的常数，
对数据进行平移.当应用 Box-Cox 变换或更广义的指数变换时，必须确定参数 λ 的值，这
可以通过极大似然方法（找到能使变换后信号的高斯似然最大化的 λ 值）或贝叶斯方法来
完成.SciPy 的stats 包中有 Box-Cox 变换的实现方法.
>>> from scipy import stats
# 接上一个例子，假设biz_df包含Yelp商家点评数据。
# Box-Cox变换假定输入数据都是正的。
# 检查数据的最小值以确定满足假定。
>>> biz_df['review_count'].min()
3
# 设置输入参数λ为0，使用对数变换（没有固定长度的位移）。
>>> rc_log = stats.boxcox(biz_df['review_count'], lmbda=0)
# 默认情况下，SciPy在实现Box-Cox转换时，会找出使得输出最接近于正态分布的λ参数。
>>> rc_bc, bc_params = stats.boxcox(biz_df['review_count'])
>>> bc_params
-0.4106510862321085

概率图（probplot）是一种非常简单的可视化方法，用以比较数据的实际分布与理论分布，
它本质上是一种表示实测分位数和理论分位数的关系的散点图. 那画概率分布是不是可以用来比较两个特征的分布是否一致呢.应该是可以的
